// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  Barber
  Customer
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

model User {
  id            String           @id @default(uuid())
  name          String?
  email         String           @unique
  emailVerified DateTime?
  image         String?
  username      String?          @unique
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  role          Role             @default(Customer)

  accounts      Account[]
  sessions      Session[]
  availability  Availability[]
  eventTypes    EventType[]
  bookingsAsCustomer Booking[]   @relation("CustomerBookings")
  bookingsAsBarber   Booking[]   @relation("BarberBookings")
  customerProfile   CustomerProfile?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Availability {
  id        String @id @default(uuid())
  day       Day
  fromTime  String // e.g., '08:00'
  tillTime  String // e.g., '18:00'
  isActive  Boolean @default(true)

  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id       String @id @default(uuid())
  name     String
  price    Float

  eventTypes EventType[]
}

model EventType {
  id          String   @id @default(uuid())
  title       String
  duration    Int       // Duration in minutes
  active      Boolean   @default(true)

  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceId   String
  service     Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  bookings    Booking[] // Add relation field to Booking

  createdAt   DateTime  @default(now())
}

model Booking {
  id          String   @id @default(uuid())
  customerId  String
  barberId    String
  eventTypeId String
  bookingDate DateTime
  startTime   String    // e.g., '10:00'
  endTime     String    // e.g., '10:30'

  customer    User      @relation("CustomerBookings", fields: [customerId], references: [id])
  barber      User      @relation("BarberBookings", fields: [barberId], references: [id])
  eventType   EventType @relation(fields: [eventTypeId], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CustomerProfile {
  id        String  @id @default(uuid())
  userId    String  @unique
  phone     String?
  address   String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}



